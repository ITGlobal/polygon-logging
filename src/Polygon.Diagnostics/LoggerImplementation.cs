
// <auto-generated>
//      This code was generated using T4 text template
//      Generated at 03/24/2017 12:44:23
//
//      Changes to this file may cause incorrect behaviour and will be lost 
//      if the code is regenerated.
// </auto-generated>

using System;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;

namespace Polygon.Diagnostics
{
    /// <summary>
    ///     Логгер
    /// </summary>
    internal sealed class LoggerImplementation : ILog
    {
        private readonly string name;

        public LoggerImplementation(string name)
        {
            this.name = name;
        }

        #region Trace

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Trace"/>.
        /// </summary>
        public bool IsTraceEnabled => LogManager.IsLoggingEnabled(name, LogLevel.Trace);

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Trace"/>.
        /// </summary>
		[NotNull] 
		public ITraceLogPrinter Trace([CallerLineNumber] int line = 0, [CallerMemberName] string caller = null)
		{
			if(!IsTraceEnabled)
			{
				return LogTraceDisabledLogPrinter.Instance;
			}

			return LogTraceLogPrinter.Acquire(name, caller, line);
		}

        #endregion

        #region Debug

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Debug"/>.
        /// </summary>
        public bool IsDebugEnabled => LogManager.IsLoggingEnabled(name, LogLevel.Debug);

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Debug"/>.
        /// </summary>
		[NotNull] 
		public IDebugLogPrinter Debug([CallerLineNumber] int line = 0, [CallerMemberName] string caller = null)
		{
			if(!IsDebugEnabled)
			{
				return LogDebugDisabledLogPrinter.Instance;
			}

			return LogDebugLogPrinter.Acquire(name, caller, line);
		}

        #endregion

        #region Info

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Info"/>.
        /// </summary>
        public bool IsInfoEnabled => LogManager.IsLoggingEnabled(name, LogLevel.Info);

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Info"/>.
        /// </summary>
		[NotNull] 
		public IInfoLogPrinter Info([CallerLineNumber] int line = 0, [CallerMemberName] string caller = null)
		{
			if(!IsInfoEnabled)
			{
				return LogInfoDisabledLogPrinter.Instance;
			}

			return LogInfoLogPrinter.Acquire(name, caller, line);
		}

        #endregion

        #region Warn

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Warn"/>.
        /// </summary>
        public bool IsWarnEnabled => LogManager.IsLoggingEnabled(name, LogLevel.Warn);

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
		[NotNull] 
		public IWarnLogPrinter Warn([CallerLineNumber] int line = 0, [CallerMemberName] string caller = null)
		{
			if(!IsWarnEnabled)
			{
				return LogWarnDisabledLogPrinter.Instance;
			}

			return LogWarnLogPrinter.Acquire(name, caller, line);
		}

        #endregion

        #region Error

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Error"/>.
        /// </summary>
        public bool IsErrorEnabled => LogManager.IsLoggingEnabled(name, LogLevel.Error);

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
		[NotNull] 
		public IErrorLogPrinter Error([CallerLineNumber] int line = 0, [CallerMemberName] string caller = null)
		{
			if(!IsErrorEnabled)
			{
				return LogErrorDisabledLogPrinter.Instance;
			}

			return LogErrorLogPrinter.Acquire(name, caller, line);
		}

        #endregion

        #region Fatal

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Fatal"/>.
        /// </summary>
        public bool IsFatalEnabled => LogManager.IsLoggingEnabled(name, LogLevel.Fatal);

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Fatal"/>.
        /// </summary>
		[NotNull] 
		public IFatalLogPrinter Fatal([CallerLineNumber] int line = 0, [CallerMemberName] string caller = null)
		{
			if(!IsFatalEnabled)
			{
				return LogFatalDisabledLogPrinter.Instance;
			}

			return LogFatalLogPrinter.Acquire(name, caller, line);
		}

        #endregion

    	}
}
