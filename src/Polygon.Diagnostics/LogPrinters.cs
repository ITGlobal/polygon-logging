
// <auto-generated>
//      This code was generated using T4 text template
//      Generated at 03/24/2017 12:44:24
//
//      Changes to this file may cause incorrect behaviour and will be lost 
//      if the code is regenerated.
// </auto-generated>

using System;

namespace Polygon.Diagnostics
{

	/// <summary>
	///		Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Trace"/> (реализация)
	/// </summary>
	internal sealed class LogTraceLogPrinter : LogPrinterBase, ITraceLogPrinter
	{
		private static readonly LogPrinterCache<LogTraceLogPrinter> _Cache = new LogPrinterCache<LogTraceLogPrinter>();

		public static LogTraceLogPrinter Acquire(string loggerName, string methodName, int lineNumber)
			=> _Cache.Acquire(loggerName, methodName, lineNumber);

		protected override void Release() => _Cache.Release(this);
		
        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Trace"/>.
        /// </summary>
        public bool IsEnabled => true;

		protected override LogLevel Level => LogLevel.Trace;

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Trace"/>.
        /// </summary>
		public void Print(IPrintable message) => PrintImpl(message);



	}

	/// <summary>
	///		Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Debug"/> (реализация)
	/// </summary>
	internal sealed class LogDebugLogPrinter : LogPrinterBase, IDebugLogPrinter
	{
		private static readonly LogPrinterCache<LogDebugLogPrinter> _Cache = new LogPrinterCache<LogDebugLogPrinter>();

		public static LogDebugLogPrinter Acquire(string loggerName, string methodName, int lineNumber)
			=> _Cache.Acquire(loggerName, methodName, lineNumber);

		protected override void Release() => _Cache.Release(this);
		
        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Debug"/>.
        /// </summary>
        public bool IsEnabled => true;

		protected override LogLevel Level => LogLevel.Debug;

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Debug"/>.
        /// </summary>
		public void Print(IPrintable message) => PrintImpl(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Debug"/>.
        /// </summary>
        public void Print(FormattableString message)
		{
			var formattedMessage = LogMessage.Format(message);
			PrintImpl(formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Debug"/>.
        /// </summary>
        public void Print(FormattableString message, params ILogField[] fields)
		{
			var formattedMessage = LogMessage.Make(message, fields);
			PrintImpl(formattedMessage);
		}


	}

	/// <summary>
	///		Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Info"/> (реализация)
	/// </summary>
	internal sealed class LogInfoLogPrinter : LogPrinterBase, IInfoLogPrinter
	{
		private static readonly LogPrinterCache<LogInfoLogPrinter> _Cache = new LogPrinterCache<LogInfoLogPrinter>();

		public static LogInfoLogPrinter Acquire(string loggerName, string methodName, int lineNumber)
			=> _Cache.Acquire(loggerName, methodName, lineNumber);

		protected override void Release() => _Cache.Release(this);
		
        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Info"/>.
        /// </summary>
        public bool IsEnabled => true;

		protected override LogLevel Level => LogLevel.Info;

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Info"/>.
        /// </summary>
		public void Print(IPrintable message) => PrintImpl(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Info"/>.
        /// </summary>
        public void Print(FormattableString message)
		{
			var formattedMessage = LogMessage.Format(message);
			PrintImpl(formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Info"/>.
        /// </summary>
        public void Print(FormattableString message, params ILogField[] fields)
		{
			var formattedMessage = LogMessage.Make(message, fields);
			PrintImpl(formattedMessage);
		}


	}

	/// <summary>
	///		Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Warn"/> (реализация)
	/// </summary>
	internal sealed class LogWarnLogPrinter : LogPrinterBase, IWarnLogPrinter
	{
		private static readonly LogPrinterCache<LogWarnLogPrinter> _Cache = new LogPrinterCache<LogWarnLogPrinter>();

		public static LogWarnLogPrinter Acquire(string loggerName, string methodName, int lineNumber)
			=> _Cache.Acquire(loggerName, methodName, lineNumber);

		protected override void Release() => _Cache.Release(this);
		
        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Warn"/>.
        /// </summary>
        public bool IsEnabled => true;

		protected override LogLevel Level => LogLevel.Warn;

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
		public void Print(IPrintable message) => PrintImpl(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(FormattableString message)
		{
			var formattedMessage = LogMessage.Format(message);
			PrintImpl(formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(FormattableString message, params ILogField[] fields)
		{
			var formattedMessage = LogMessage.Make(message, fields);
			PrintImpl(formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
		public void Print(Exception exception, IPrintable message) => PrintImpl(exception, message);
		

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message)
		{
			var formattedMessage = LogMessage.Format(message);
			PrintImpl(exception, formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message, params ILogField[] fields)
		{
			var formattedMessage = LogMessage.Make(message, fields);
			PrintImpl(exception, formattedMessage);
		}

	}

	/// <summary>
	///		Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Error"/> (реализация)
	/// </summary>
	internal sealed class LogErrorLogPrinter : LogPrinterBase, IErrorLogPrinter
	{
		private static readonly LogPrinterCache<LogErrorLogPrinter> _Cache = new LogPrinterCache<LogErrorLogPrinter>();

		public static LogErrorLogPrinter Acquire(string loggerName, string methodName, int lineNumber)
			=> _Cache.Acquire(loggerName, methodName, lineNumber);

		protected override void Release() => _Cache.Release(this);
		
        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Error"/>.
        /// </summary>
        public bool IsEnabled => true;

		protected override LogLevel Level => LogLevel.Error;

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
		public void Print(IPrintable message) => PrintImpl(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(FormattableString message)
		{
			var formattedMessage = LogMessage.Format(message);
			PrintImpl(formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(FormattableString message, params ILogField[] fields)
		{
			var formattedMessage = LogMessage.Make(message, fields);
			PrintImpl(formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
		public void Print(Exception exception, IPrintable message) => PrintImpl(exception, message);
		

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message)
		{
			var formattedMessage = LogMessage.Format(message);
			PrintImpl(exception, formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message, params ILogField[] fields)
		{
			var formattedMessage = LogMessage.Make(message, fields);
			PrintImpl(exception, formattedMessage);
		}

	}

	/// <summary>
	///		Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Fatal"/> (реализация)
	/// </summary>
	internal sealed class LogFatalLogPrinter : LogPrinterBase, IFatalLogPrinter
	{
		private static readonly LogPrinterCache<LogFatalLogPrinter> _Cache = new LogPrinterCache<LogFatalLogPrinter>();

		public static LogFatalLogPrinter Acquire(string loggerName, string methodName, int lineNumber)
			=> _Cache.Acquire(loggerName, methodName, lineNumber);

		protected override void Release() => _Cache.Release(this);
		
        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Fatal"/>.
        /// </summary>
        public bool IsEnabled => true;

		protected override LogLevel Level => LogLevel.Fatal;



		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Fatal"/>.
        /// </summary>
		public void Print(Exception exception, IPrintable message) => PrintImpl(exception, message);
		

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Fatal"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message)
		{
			var formattedMessage = LogMessage.Format(message);
			PrintImpl(exception, formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Fatal"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message, params ILogField[] fields)
		{
			var formattedMessage = LogMessage.Make(message, fields);
			PrintImpl(exception, formattedMessage);
		}

	}
}
