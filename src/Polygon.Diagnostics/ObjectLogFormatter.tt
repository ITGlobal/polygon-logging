<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="defs.t4" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>

// <auto-generated>
//      This code was generated using T4 text template
//      Generated at <#= DateTime.Now #>
//
//      Changes to this file may cause incorrect behaviour and will be lost 
//      if the code is regenerated.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;

namespace Polygon.Diagnostics
{
	partial class ObjectLogFormatter
    {
<# foreach(var type in PrintableType.Types) { #>
	#region <#=type.Name#>

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, <#=type.Name#> value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, <#=type.Name#> value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<<#=type.Name#>> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<<#=type.Name#>> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		<# if(type.IsNullable) { #>


        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, <#=type.Name#>? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, <#=type.Name#>? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<<#=type.Name#>?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<<#=type.Name#>?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		<# } #>

	#endregion
	<# } #>
	}
}
<#+
    public sealed class PrintableType
    {
		private PrintableType(string name, bool isNullable = true) 
		{
			Name       = name;
			IsNullable = isNullable;
		}
		
		public string Name { get; private set; }
		public bool   IsNullable { get; private set; }

		public static readonly PrintableType[] Types = Generate().ToArray();

		private static IEnumerable<PrintableType> Generate() 
		{
			yield return new PrintableType("IPrintable", isNullable: false);
			yield return new PrintableType("string", isNullable: false);
			yield return new PrintableType("bool");
			yield return new PrintableType("int");
			yield return new PrintableType("uint");
			yield return new PrintableType("long");
			yield return new PrintableType("ulong");
			yield return new PrintableType("short");
			yield return new PrintableType("ushort");
			yield return new PrintableType("byte");
			yield return new PrintableType("sbyte");
			yield return new PrintableType("float");
			yield return new PrintableType("double");
			yield return new PrintableType("decimal");
			yield return new PrintableType("DateTime");
			yield return new PrintableType("TimeSpan");
			yield return new PrintableType("Guid");
		}
    }
#>
