

// <auto-generated>
//      This code was generated using T4 text template
//      Generated at 03/24/2017 12:44:24
//
//      Changes to this file may cause incorrect behaviour and will be lost 
//      if the code is regenerated.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;

namespace Polygon.Diagnostics
{
	partial class ObjectLogFormatter
    {
	#region IPrintable

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, IPrintable value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, IPrintable value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<IPrintable> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<IPrintable> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		
	#endregion
		#region string

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, string value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, string value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<string> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<string> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		
	#endregion
		#region bool

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, bool value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, bool value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<bool> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<bool> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, bool? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, bool? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<bool?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<bool?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region int

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, int value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, int value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<int> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<int> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, int? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, int? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<int?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<int?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region uint

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, uint value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, uint value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<uint> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<uint> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, uint? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, uint? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<uint?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<uint?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region long

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, long value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, long value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<long> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<long> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, long? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, long? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<long?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<long?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region ulong

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, ulong value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, ulong value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<ulong> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<ulong> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, ulong? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, ulong? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<ulong?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<ulong?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region short

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, short value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, short value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<short> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<short> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, short? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, short? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<short?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<short?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region ushort

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, ushort value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, ushort value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<ushort> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<ushort> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, ushort? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, ushort? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<ushort?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<ushort?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region byte

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, byte value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, byte value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<byte> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<byte> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, byte? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, byte? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<byte?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<byte?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region sbyte

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, sbyte value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, sbyte value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<sbyte> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<sbyte> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, sbyte? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, sbyte? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<sbyte?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<sbyte?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region float

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, float value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, float value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<float> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<float> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, float? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, float? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<float?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<float?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region double

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, double value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, double value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<double> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<double> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, double? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, double? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<double?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<double?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region decimal

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, decimal value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, decimal value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<decimal> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<decimal> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, decimal? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, decimal? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<decimal?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<decimal?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region DateTime

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, DateTime value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, DateTime value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<DateTime> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<DateTime> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, DateTime? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, DateTime? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<DateTime?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<DateTime?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region TimeSpan

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, TimeSpan value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, TimeSpan value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<TimeSpan> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<TimeSpan> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, TimeSpan? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, TimeSpan? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<TimeSpan?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<TimeSpan?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		#region Guid

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, Guid value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, Guid value, string format = null)
        {
            AddFieldCore(name, FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<Guid> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<Guid> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => FormattingHelper.Format(value, format));
        }

		

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddField([NotNull] string name, Guid? value, string format = null)
        {
            if (value == null)
            {
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddFieldRequired([NotNull] string name, Guid? value, string format = null)
        {
			if (value == null)
            {
				AddFieldCore(name, NullStr);
                return;
            }

            AddFieldCore(name, FormattingHelper.Format(value.Value, format));
        }

        /// <summary>
        ///     Записать поле объекта, если оно не равно значению по умолчанию
        /// </summary>
        public void AddListField([NotNull] string name, IEnumerable<Guid?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }

        /// <summary>
        ///     Записать поле объекта, даже если оно равно значению по умолчанию
        /// </summary>
        public void AddListFieldRequired([NotNull] string name, IEnumerable<Guid?> values, string format = null)
        {
            if (ReferenceEquals(values, null))
            {
                AddFieldCore(name, NullStr);
                return;
            }

            AddListFieldCore(name, values, value => 
			{
				if(value == null)
				{
					return NullStr;
				}

				return FormattingHelper.Format(value.Value, format);
			});
        }


		
	#endregion
		}
}
