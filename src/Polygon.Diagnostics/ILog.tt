<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="defs.t4" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
//      This code was generated using T4 text template
//      Generated at <#= DateTime.Now #>
//
//      Changes to this file may cause incorrect behaviour and will be lost 
//      if the code is regenerated.
// </auto-generated>

using JetBrains.Annotations;

namespace Polygon.Diagnostics
{
    /// <summary>
    ///     Логгер
    /// </summary>
    [PublicAPI]
    public interface ILog
    {
<# foreach(var level in T4LogLevel.Levels) { #>

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        bool Is<#= level #>Enabled { get; }

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
		[NotNull]
		I<#= level #>LogPrinter <#= level #>([System.Runtime.CompilerServices.CallerLineNumber] int line = 0, [System.Runtime.CompilerServices.CallerMemberName] string caller = null);
<# } #>
	}

<# foreach(var level in T4LogLevel.Levels) { #>

	/// <summary>
	///		Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.<#= level #>"/>.
	/// </summary>
<# if(level.AllowException) { #>
	[SupportExceptionLogging]
<# } #>
	[PublicAPI]
    public interface I<#= level #>LogPrinter
	{
        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        bool IsEnabled { get; }

<# if(level.AllowNoException) { #>
		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
		[LogMethod]
		void Print([NotNull] IPrintable message);
<# } #>

<# if(level.AllowNoException && level.AllowStringInterpolation) { #>
		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        [LogMethod]
		void Print([NotNull] System.FormattableString message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        [LogMethod]
		void Print([NotNull] System.FormattableString message, params ILogField[] fields);
<# } #>

<# if(level.AllowException) { #>
		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
		[LogExceptionMethod]
		void Print([NotNull] System.Exception exception, [NotNull] IPrintable message);
<# } #>

<# if(level.AllowException && level.AllowStringInterpolation) { #>
        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        [LogExceptionMethod]
		void Print([NotNull] System.Exception exception, [NotNull] System.FormattableString message);

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        [LogExceptionMethod]
		void Print([NotNull] System.Exception exception, [NotNull] System.FormattableString message, params ILogField[] fields);
<# } #>
	}

	/// <summary>
    ///     Методы-расширения для <see cref="I<#= level #>LogPrinter"/>
    /// </summary>
	[PublicAPI]
    public static class <#= level #>LogPrinterExtensions
	{

<# if(level.AllowNoException) { #>
		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        [LogMethod]
		public static void Print([NotNull] this I<#= level #>LogPrinter printer, [NotNull] string message) 
		{
			if(!printer.IsEnabled)
			{
				return;
			}

			var printerImpl = printer as LogPrinterBase;
			if(printerImpl != null)
			{
				printerImpl.PrintImpl(LogMessage.Preformatted(message));
			}
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
		[LogMethod]
		public static void Print([NotNull] this I<#= level #>LogPrinter printer, [NotNull] string message, params ILogField[] fields) 
		{
			if(!printer.IsEnabled)
			{
				FormattingHelper.ReleaseUnused(fields);
				return;
			}

			var printerImpl = printer as LogPrinterBase;
			if(printerImpl != null)
			{
				var formattedMessage = LogMessage.MakeString(message, fields);
				printerImpl.PrintImpl(formattedMessage);
			}
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
		[LogMethod, StringFormatMethod("message")]
		public static void PrintFormat([NotNull] this I<#= level #>LogPrinter printer, [NotNull] string message, params object[] args) 
		{
			if(!printer.IsEnabled)
			{
				FormattingHelper.ReleaseUnused(args);
				return;
			}

			var printerImpl = printer as LogPrinterBase;
			if(printerImpl != null)
			{
				var formattedMessage = LogMessage.FormatString(message, args);
				printerImpl.PrintImpl(formattedMessage);
			}
		}
<# } #>

<# if(level.AllowException) { #>
		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        [LogExceptionMethod]
		public static void Print([NotNull] this I<#= level #>LogPrinter printer, [NotNull] System.Exception exception, [NotNull] string message) 
		{
			if(!printer.IsEnabled)
			{
				return;
			}

			var printerImpl = printer as LogPrinterBase;
			if(printerImpl != null)
			{
				printerImpl.PrintImpl(exception, LogMessage.Preformatted(message));
			}
		}
				
		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>		
		[LogExceptionMethod]
		public static void Print([NotNull] this I<#= level #>LogPrinter printer, [NotNull] System.Exception exception, [NotNull] string message, params ILogField[] fields) 
		{
			if(!printer.IsEnabled)
			{
				FormattingHelper.ReleaseUnused(fields);
				return;
			}

			var printerImpl = printer as LogPrinterBase;
			if(printerImpl != null)
			{
				var formattedMessage = LogMessage.MakeString(message, fields);
				printerImpl.PrintImpl(exception, formattedMessage);
			}
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        [LogExceptionMethod, StringFormatMethod("message")]
		public static void PrintFormat([NotNull] this I<#= level #>LogPrinter printer, [NotNull] System.Exception exception, [NotNull] string message, params object[] args) 
		{
			if(!printer.IsEnabled)
			{
				FormattingHelper.ReleaseUnused(args);
				return;
			}

			var printerImpl = printer as LogPrinterBase;
			if(printerImpl != null)
			{
				var formattedMessage = LogMessage.FormatString(message, args);
				printerImpl.PrintImpl(exception, formattedMessage);
			}
		}
<# } #>
	
	}

<# } #>
}
