<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="defs.t4" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>

// <auto-generated>
//      This code was generated using T4 text template
//      Generated at <#= DateTime.Now #>
//
//      Changes to this file may cause incorrect behaviour and will be lost 
//      if the code is regenerated.
// </auto-generated>

using System;
using JetBrains.Annotations;

namespace Polygon.Diagnostics
{
    partial class LogMessage
    {
<# foreach(var type in PrintableType.Types) { #>
		/// <summary>
        ///     Создать объект для записи в лог поля с указанными названием и значением, с автоматическим форматированием значения
        /// </summary>
        [NotNull]
        public static ILogField Field(
            [NotNull] string name, 
            [CanBeNull] <#=type.Name#> value,
            [CanBeNull] string format = null,
            [CanBeNull] string suffix = null)
            => LogFieldImpl<<#=type.Name#>>.Create(name, value, format, suffix);

<# if(type.IsNullable) { #>
		/// <summary>
        ///     Создать объект для записи в лог поля с указанными названием и значением, с автоматическим форматированием значения
        /// </summary>
        [NotNull]
        public static ILogField Field(
            [NotNull] string name, 
            [CanBeNull] <#=type.Name#>? value,
            [CanBeNull] string format = null,
            [CanBeNull] string suffix = null)
            => LogFieldImpl<<#=type.Name#>?>.Create(name, value, format, suffix);
		<# } #>
<# } #>
	}
}
<#+
    public sealed class PrintableType
    {
		private PrintableType(string name, bool isNullable = true) 
		{
			Name       = name;
			IsNullable = isNullable;
		}
		
		public string Name { get; private set; }
		public bool   IsNullable { get; private set; }

		public static readonly PrintableType[] Types = Generate().ToArray();

		private static IEnumerable<PrintableType> Generate() 
		{
			yield return new PrintableType("IPrintable", isNullable: false);
			yield return new PrintableType("string", isNullable: false);
			yield return new PrintableType("bool");
			yield return new PrintableType("int");
			yield return new PrintableType("uint");
			yield return new PrintableType("long");
			yield return new PrintableType("ulong");
			yield return new PrintableType("short");
			yield return new PrintableType("ushort");
			yield return new PrintableType("byte");
			yield return new PrintableType("sbyte");
			yield return new PrintableType("float");
			yield return new PrintableType("double");
			yield return new PrintableType("decimal");
			yield return new PrintableType("DateTime");
			yield return new PrintableType("TimeSpan");
			yield return new PrintableType("Guid");
		}
    }
#>
