<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="defs.t4" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
//      This code was generated using T4 text template
//      Generated at <#= DateTime.Now #>
//
//      Changes to this file may cause incorrect behaviour and will be lost 
//      if the code is regenerated.
// </auto-generated>

using System;

namespace Polygon.Diagnostics
{
<# foreach(var level in T4LogLevel.Levels) { #>

	/// <summary>
	///		Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.<#= level #>"/> (реализация)
	/// </summary>
	internal sealed class Log<#= level #>LogPrinter : LogPrinterBase, I<#= level #>LogPrinter
	{
		private static readonly LogPrinterCache<Log<#= level #>LogPrinter> _Cache = new LogPrinterCache<Log<#= level #>LogPrinter>();

		public static Log<#= level #>LogPrinter Acquire(string loggerName, string methodName, int lineNumber)
			=> _Cache.Acquire(loggerName, methodName, lineNumber);

		protected override void Release() => _Cache.Release(this);
		
        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        public bool IsEnabled => true;

		protected override LogLevel Level => LogLevel.<#= level #>;

<# if(level.AllowNoException) { #>
		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
		public void Print(IPrintable message) => PrintImpl(message);
<# } #>

<# if(level.AllowNoException && level.AllowStringInterpolation) { #>
		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        public void Print(FormattableString message)
		{
			var formattedMessage = LogMessage.Format(message);
			PrintImpl(formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        public void Print(FormattableString message, params ILogField[] fields)
		{
			var formattedMessage = LogMessage.Make(message, fields);
			PrintImpl(formattedMessage);
		}
<# } #>

<# if(level.AllowException) { #>
		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
		public void Print(Exception exception, IPrintable message) => PrintImpl(exception, message);
		
<# } #>

<# if(level.AllowException && level.AllowStringInterpolation) { #>
        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message)
		{
			var formattedMessage = LogMessage.Format(message);
			PrintImpl(exception, formattedMessage);
		}

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.<#= level #>"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message, params ILogField[] fields)
		{
			var formattedMessage = LogMessage.Make(message, fields);
			PrintImpl(exception, formattedMessage);
		}

<# } #>
	}
<# } #>
}
