
// <auto-generated>
//      This code was generated using T4 text template
//      Generated at 03/24/2017 12:44:23
//
//      Changes to this file may cause incorrect behaviour and will be lost 
//      if the code is regenerated.
// </auto-generated>

using System;

namespace Polygon.Diagnostics
{

    /// <summary>
    ///     Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Trace"/> (реализация)
    /// </summary>
    internal sealed class LogTraceDisabledLogPrinter : LogPrinterBase, ITraceLogPrinter
    {
        public static readonly LogTraceDisabledLogPrinter Instance = new LogTraceDisabledLogPrinter();

		private LogTraceDisabledLogPrinter() { }

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Trace"/>.
        /// </summary>
        public bool IsEnabled => false;

		protected override LogLevel Level => LogLevel.Trace;

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Trace"/>.
        /// </summary>
        public void Print(IPrintable message) => FormattingHelper.ReleaseUnused(message);




    }

    /// <summary>
    ///     Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Debug"/> (реализация)
    /// </summary>
    internal sealed class LogDebugDisabledLogPrinter : LogPrinterBase, IDebugLogPrinter
    {
        public static readonly LogDebugDisabledLogPrinter Instance = new LogDebugDisabledLogPrinter();

		private LogDebugDisabledLogPrinter() { }

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Debug"/>.
        /// </summary>
        public bool IsEnabled => false;

		protected override LogLevel Level => LogLevel.Debug;

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Debug"/>.
        /// </summary>
        public void Print(IPrintable message) => FormattingHelper.ReleaseUnused(message);


        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Debug"/>.
        /// </summary>
        public void Print(FormattableString message) => FormattingHelper.ReleaseUnused(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Debug"/>.
        /// </summary>
        public void Print(FormattableString message, params ILogField[] fields)
		{
			FormattingHelper.ReleaseUnused(message);
			FormattingHelper.ReleaseUnused(fields);
		}


    }

    /// <summary>
    ///     Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Info"/> (реализация)
    /// </summary>
    internal sealed class LogInfoDisabledLogPrinter : LogPrinterBase, IInfoLogPrinter
    {
        public static readonly LogInfoDisabledLogPrinter Instance = new LogInfoDisabledLogPrinter();

		private LogInfoDisabledLogPrinter() { }

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Info"/>.
        /// </summary>
        public bool IsEnabled => false;

		protected override LogLevel Level => LogLevel.Info;

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Info"/>.
        /// </summary>
        public void Print(IPrintable message) => FormattingHelper.ReleaseUnused(message);


        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Info"/>.
        /// </summary>
        public void Print(FormattableString message) => FormattingHelper.ReleaseUnused(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Info"/>.
        /// </summary>
        public void Print(FormattableString message, params ILogField[] fields)
		{
			FormattingHelper.ReleaseUnused(message);
			FormattingHelper.ReleaseUnused(fields);
		}


    }

    /// <summary>
    ///     Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Warn"/> (реализация)
    /// </summary>
    internal sealed class LogWarnDisabledLogPrinter : LogPrinterBase, IWarnLogPrinter
    {
        public static readonly LogWarnDisabledLogPrinter Instance = new LogWarnDisabledLogPrinter();

		private LogWarnDisabledLogPrinter() { }

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Warn"/>.
        /// </summary>
        public bool IsEnabled => false;

		protected override LogLevel Level => LogLevel.Warn;

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(IPrintable message) => FormattingHelper.ReleaseUnused(message);


        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(FormattableString message) => FormattingHelper.ReleaseUnused(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(FormattableString message, params ILogField[] fields)
		{
			FormattingHelper.ReleaseUnused(message);
			FormattingHelper.ReleaseUnused(fields);
		}

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(Exception exception, IPrintable message) => FormattingHelper.ReleaseUnused(message);


        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message) => FormattingHelper.ReleaseUnused(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Warn"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message, params ILogField[] fields)
		{
			FormattingHelper.ReleaseUnused(message);
			FormattingHelper.ReleaseUnused(fields);
		}

    }

    /// <summary>
    ///     Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Error"/> (реализация)
    /// </summary>
    internal sealed class LogErrorDisabledLogPrinter : LogPrinterBase, IErrorLogPrinter
    {
        public static readonly LogErrorDisabledLogPrinter Instance = new LogErrorDisabledLogPrinter();

		private LogErrorDisabledLogPrinter() { }

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Error"/>.
        /// </summary>
        public bool IsEnabled => false;

		protected override LogLevel Level => LogLevel.Error;

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(IPrintable message) => FormattingHelper.ReleaseUnused(message);


        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(FormattableString message) => FormattingHelper.ReleaseUnused(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(FormattableString message, params ILogField[] fields)
		{
			FormattingHelper.ReleaseUnused(message);
			FormattingHelper.ReleaseUnused(fields);
		}

        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(Exception exception, IPrintable message) => FormattingHelper.ReleaseUnused(message);


        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message) => FormattingHelper.ReleaseUnused(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Error"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message, params ILogField[] fields)
		{
			FormattingHelper.ReleaseUnused(message);
			FormattingHelper.ReleaseUnused(fields);
		}

    }

    /// <summary>
    ///     Fluent-интерфейс для записи событий с уровнен <see cref="LogLevel.Fatal"/> (реализация)
    /// </summary>
    internal sealed class LogFatalDisabledLogPrinter : LogPrinterBase, IFatalLogPrinter
    {
        public static readonly LogFatalDisabledLogPrinter Instance = new LogFatalDisabledLogPrinter();

		private LogFatalDisabledLogPrinter() { }

        /// <summary>
        ///     Разрешен ли уровень логирования <see cref="LogLevel.Fatal"/>.
        /// </summary>
        public bool IsEnabled => false;

		protected override LogLevel Level => LogLevel.Fatal;



        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Fatal"/>.
        /// </summary>
        public void Print(Exception exception, IPrintable message) => FormattingHelper.ReleaseUnused(message);


        /// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Fatal"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message) => FormattingHelper.ReleaseUnused(message);

		/// <summary>
        ///     Записать в лог сообщение с уровнен <see cref="LogLevel.Fatal"/>.
        /// </summary>
        public void Print(Exception exception, FormattableString message, params ILogField[] fields)
		{
			FormattingHelper.ReleaseUnused(message);
			FormattingHelper.ReleaseUnused(fields);
		}

    }
}
